//: strings/JGrep.java
// A very simple version of the "grep" program.
// {Args: JGrep.java "\\b[Ssct]\\w+"}
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.*;
import net.mindview.util.*;

public class Main {
	public static void main(String[] args) throws Exception {
	int flag = 0;
    if(args.length < 2) {
      System.out.println("Usage: java JGrep file regex");
      System.exit(0);
    }
    else if(args.length > 2) {
    	if(args[2].equals("Pattern.CASE_INSENSITIVE")) 
			flag = Pattern.CASE_INSENSITIVE;
		else if(args[2].equals("Pattern.CANON_EQ"))
			flag = Pattern.CANON_EQ;
		else if(args[2].equals("Pattern.COMMENTS"))
			flag = Pattern.COMMENTS;
		else if(args[2].equals("Pattern.DOTALL"))
			flag = Pattern.DOTALL;
		else if(args[2].equals("Pattern.LITERAL"))
			flag = Pattern.LITERAL;
		else if(args[2].equals("Pattern.MULTILINE"))
			flag = Pattern.MULTILINE;
		else if(args[2].equals("Pattern.UNICODE_CASE"))
			flag = Pattern.UNICODE_CASE;
		else if(args[2].equals("Pattern.UNIX_LINES"))
			flag = Pattern.UNIX_LINES;
		else
			System.out.println("Not found such flag: \"" + args[2] + "\" Using default flag");
    }
    Pattern p = Pattern.compile(args[1], flag);
    // Iterate through the lines of the input file:
    int index = 0;
    Matcher m = p.matcher("");
    File file =  new File(args[0]);
    List<String> files = new ArrayList<>();
    if(file.isDirectory()) {
    	File[] filelist = file.listFiles();
    	for(File f:filelist) {
    		if(f.isFile()) files.add(f.getAbsolutePath());
    	}
    }
    else files.add(file.getAbsolutePath());
    
    for(String f:files) {
    	System.out.println("file name:" + f);
    	for(String line : new TextFile(f)) {
    	      m.reset(line);
    	      while(m.find())
    	        System.out.println(index++ + ": " +
    	          m.group() + ": " + m.start());
    	    }
    }
  }
} /* Output: (Sample)
0: strings: 4
1: simple: 10
2: the: 28
3: Ssct: 26
4: class: 7
5: static: 9
6: String: 26
7: throws: 41
8: System: 6
9: System: 6
10: compile: 24
11: through: 15
12: the: 23
13: the: 36
14: String: 8
15: System: 8
16: start: 31
*///:~
